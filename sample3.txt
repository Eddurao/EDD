# Tarea semestral

matriz=[[0,3,2,3],
        [3,2,1,2],
        [2,1,4,3],
        [3,2,3,2]]

def validar(li, ls, msg):
    while True:
        x=input(msg)
        try:
            x=int(x)
        except:
            print("Error, ingrese un número válido.")
        else:
            if li <= x <= ls:
                return x
            else:
                print('Error, fuera de rango.')

# Decide si la casilla (x,y) es una esquina
def esquina(x,y,dim):
        if (x,y)==(1,1):
            return True
        elif (x,y)==(dim,dim):
            return True
        elif (x,y)==(1,dim):
            return True
        elif (x,y)==(dim,1):
            return True
        else:
            return False

# Calcula la cantidad de movimientos entre casillas v y u
def mov(v,u,dim):
    global matriz
    x1=v[0]
    y1=v[1]
    x2=u[0]
    y2=u[1]
    deltax=abs(x1-x2)
    deltay=abs(y1-y2)

    # Excepciones
    if deltax==1 and deltay==1:
        if esquina(x1,y1,dim) or esquina(x2,y2,dim):
            return 4

    if dim==4 and (deltax,deltay)==(0,3) or (deltax,deltay)==(3,0):
        if esquina(x1,y1,dim):
            return 5

    # Cálculo con matriz
    if deltax < 4 and deltay < 4:
        return matriz[deltax][deltay]

    # Cálculo con fórmula
    else:
        m = max(deltax/2, deltay/2, (deltax+deltay)/3)
        redondeado=round(m)
        if redondeado >= m:
            m = redondeado
        else:
            m = redondeado+1
        movimientos = m + ((m + deltax + deltay) % 2)
        return movimientos

# Calcula movimientos necesarios para recorrer la secuencia 'sec'
# Detiene el cálculo cuando la suma pasa el limite 'lim'
def mov_sec(sec, lim, dim):
    sum=0
    i=-1
    m=len(sec)-1
    if lim == -1:
        while i < m:
            sum+=mov(sec[i], sec[i+1], dim)
            i+=1
    else:
        while i < m and sum < lim:
            sum+=mov(sec[i], sec[i+1], dim)
            i+=1
    return sum

def costo_insercion(sec, cas, i, dim):
    return mov(sec[i-1], cas, dim)+mov(cas,sec[i],dim)-mov(sec[i-1],sec[i],dim)

# Calcula una cota superior de la minima cantidad de movimientos,
# para recorrer las casillas 'interesantes'.
def cota_superior(interesantes, dim):
    if len(interesantes) == 1:
        return 0
    secuencia=[]
    for i in range(0,2):
        secuencia.append(interesantes.pop(0))

    while len(interesantes) > 0:
        long_parcial=mov_sec(secuencia, -1, dim)
        #print(f'Long={long_parcial}')
        costo=-1
        for i in range(len(interesantes)):
            for j in range(len(secuencia)):
                delta=costo_insercion(secuencia, interesantes[i], j, dim)
                #print(f'Delta={delta}, Costo={costo}')
                if delta < costo or costo==-1:
                    insercion_optima=j
                    casilla_optima=i
                    costo=delta
        secuencia.insert(insercion_optima, interesantes.pop(casilla_optima))

    min_movimientos=mov_sec(secuencia, -1, dim)
    return min_movimientos

# Cálculo cota inferior
def cota_inferior(interesantes, dim):
    if len(interesantes) > 2:
        redundancias=0
        for i in range(len(interesantes)):
            vertices=[]
            for j in range(len(interesantes)):
                if i != j:
                    checking=mov(interesantes[i],interesantes[j],dim)
                    vertices.append(checking)
            menor_1=min(vertices)
            vertices.remove(menor_1)
            menor_2=min(vertices)
            redundancias+=(menor_1 + menor_2 - 2)
        redundancias=round(redundancias/2)
        ideal=K+redundancias
    elif len(interesantes)==2:
        ideal=mov(interesantes[0],interesantes[1],dim)*2
    else:
        ideal=0
    return ideal

def factorial(x):
    fact=1
    while x > 0:
        fact*=x
        x-=1
    return fact

# Entrega un iterador con todas las permutaciones de la secuencia 'sec'
def permutaciones(sec):
    if len(sec) <= 1:
        yield sec
        return
    for perm in permutaciones(sec[1:]):
        for i in range(len(sec)):
            yield perm[:i] + sec[0:1] + perm[i:]

# Calcula solución óptima
def encontrar_optimo(sec, ideal, dim):
    optimo=-1
    primera=[sec[0]]
    resto=sec[1:]
    for i in permutaciones(resto):
        movimientos=mov_sec(primera+i, optimo, dim)
        if movimientos < optimo or optimo==-1:
            optimo=movimientos
        if optimo == ideal:
            return optimo
    return optimo

T=validar(1,100,'Ingrese el número de casos de prueba: ')
si=['si','SI','Si','sI','s', 'S', '']
for caso in range(1,T+1):
    print('########################')
    print(f'### Caso de prueba {caso} ###')
    print('########################')

    dim=validar(4,1000,'Tamaño del tablero: ')
    K=validar(1,16,'Nro. de casillas interesantes: ')
    print('Ingrese las casillas interesantes:')
    interesantes=[]
    for i in range(K):
        coord_valida=False
        while not coord_valida:
            coord=input(f'Nro.{i+1}: ')
            try:
                x,y=map(int, coord.split())
            except:
                print(f'Error, ingrese las coordenadas en formato "X Y".')
            else:
                if 1 <= x <= dim and 1 <= y <= dim:
                    coord_valida=True
                else:
                    print(f'Error, las coordenadas deben estar entre 1 y {dim}.')
        interesantes.append((x,y))
    interesantes_copia=interesantes.copy()
    print(f'Caso {caso}:')
    cota_inf=cota_inferior(interesantes,dim)
    cota_sup=cota_superior(interesantes, dim)
    print(f'{cota_sup} movimientos. ',end='')
    if cota_sup == cota_inf:
        print('(La aproximación arrojó una solución óptima)')
    else:
        print('(Aprox)')
        print(f'La solución óptima se puede encontrar entre {cota_inf} y {cota_sup}.')
        print(f'Calculando solución optima. Se probarán hasta {factorial(K-1)} combinaciones.')
        optimo=encontrar_optimo(interesantes_copia, cota_inf, dim)
        print(f'{optimo} movimientos. (Solución óptima)')
    print()
